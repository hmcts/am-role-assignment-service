#!groovy
properties(
  [
    [
      $class       : 'GithubProjectProperty',
      projectUrlStr: 'https://github.com/hmcts/role-assignment-service'
    ],
    pipelineTriggers([[$class: 'GitHubPushTrigger']])
  ]
)

@Library("Infrastructure")

def type = "java"
def product = "am"
def component = "role-assignment-service"

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

// Vars needed for functional and smoke tests run against AKS
env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.OAUTH2_CLIENT_ID = "ccd_gateway"
env.OAUTH2_REDIRECT_URI = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"

withPipeline(type, product, component) {
  onMaster {
    enableSlackNotifications('#role-assignment-service-builds')
  }
  onDemo {
    enableSlackNotifications('#role-assignment-service-builds')
  }
  onPR {
    enableSlackNotifications('#role-assignment-service-builds')
  }

  overrideVaultEnvironments(vaultOverrides)
  loadVaultSecrets(secrets)
  enableAksStagingDeployment()
  disableLegacyDeploymentOnAAT()
  installCharts()
  disableLegacyDeployment()

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/cucumber/**/*'
  }

  after('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/cucumber/**/*'
  }

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/site/serenity/**'
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/site/serenity/**'
  }
}
