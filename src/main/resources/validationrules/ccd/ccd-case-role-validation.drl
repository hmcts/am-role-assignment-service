package validationrules.iac;
import uk.gov.hmcts.reform.roleassignment.domain.model.Assignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.RoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Request;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.Status;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RequestType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.GrantType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleCategory;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleType
import uk.gov.hmcts.reform.roleassignment.domain.model.ExistingRoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Case;
import function uk.gov.hmcts.reform.roleassignment.domain.service.common.ValidationModelService.logMsg;
import uk.gov.hmcts.reform.roleassignment.domain.model.FeatureFlag;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.FeatureFlagEnum;

/*
 * CCD case roles can be created by client request originated from ccd service.
 */

rule "ccd_create_case_roles_solicitor"
when
    $rq: Request(clientId in ("ccd_data", "aac_manage_case_assignment"))
    $ra: RoleAssignment(
             roleName in ("[BARRISTER]", "[CAFCASSSOLICITOR]", "[EPSMANAGING]", "[LABARRISTER]",
                          "[LAMANAGING]", "[LASOLICITOR]", "[SOLICITOR]", "[SOLICITORA]", "[SOLICITORB]",
                          "[SOLICITORC]", "[SOLICITORD]", "[SOLICITORE]", "[SOLICITORF]", "[SOLICITORG]", "[SOLICITORH]",
                          "[SOLICITORI]", "[SOLICITORJ]", "[CREATOR]"),
             roleCategory == RoleCategory.PROFESSIONAL,
             roleType == RoleType.CASE,
             status == Status.CREATE_REQUESTED,
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())

    $c:  Case(
              id == $caseId,
              jurisdiction == "PUBLICLAW",
              caseTypeId == "CARE_SUPERVISION_EPO")
then
    $ra.setAttribute("jurisdiction", $c.getJurisdiction());
    $ra.setAttribute("caseType", $c.getCaseTypeId());
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Stage 1 approved : ccd_create_case_roles_solicitor");
    update($ra);
    logMsg("Rule : ccd_create_case_roles");
end;


/*
 * CCD case roles can be deleted by client request originated from ccd service.
 */

rule "ccd_delete_case_roles_solicitor"
when
    $rq: Request(clientId in ("ccd_data", "aac_manage_case_assignment"))
    $ra: RoleAssignment(
             roleName in ("[BARRISTER]", "[CAFCASSSOLICITOR]", "[EPSMANAGING]", "[LABARRISTER]",
                          "[LAMANAGING]", "[LASOLICITOR]", "[SOLICITOR]", "[SOLICITORA]", "[SOLICITORB]",
                          "[SOLICITORC]", "[SOLICITORD]", "[SOLICITORE]", "[SOLICITORF]", "[SOLICITORG]", "[SOLICITORH]",
                          "[SOLICITORI]", "[SOLICITORJ]", "[CREATOR]"),
             status == Status.DELETE_REQUESTED,
             roleType == RoleType.CASE,
             roleCategory == RoleCategory.PROFESSIONAL,
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())
    $c:  Case(
              id == $caseId,
              jurisdiction == "PUBLICLAW",
              caseTypeId == "CARE_SUPERVISION_EPO")
then
    $ra.setStatus(Status.DELETE_APPROVED);
    $ra.log("Delete approved : ccd_delete_case_roles");
    update($ra);
    logMsg("Rule : ccd_delete_case_roles_solicitor");
end;

/*
 * CCD case roles can be created by client request originated from ccd service.
 */

rule "ccd_create_case_roles_petitioners"
when
    $rq: Request(clientId in ("ccd_data", "aac_manage_case_assignment"))
    $ra: RoleAssignment(
             roleName in ("[PETSOLICITOR]", "[RESPSOLICITOR]"),
             roleCategory == RoleCategory.PROFESSIONAL,
             roleType == RoleType.CASE,
             status == Status.CREATE_REQUESTED,
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())

    $c:  Case(
              id == $caseId,
              jurisdiction == "DIVORCE",
              caseTypeId == "DIVORCE")
then
    $ra.setAttribute("jurisdiction", $c.getJurisdiction());
    $ra.setAttribute("caseType", $c.getCaseTypeId());
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Stage 1 approved : ccd_create_case_roles_petitioners");
    update($ra);
    logMsg("Rule : ccd_create_case_roles_petitioners");
end;


/*
 * CCD case roles can be deleted by client request originated from ccd service.
 */

rule "ccd_delete_case_roles_petitioners"
when
    $rq: Request(clientId in ("ccd_data", "aac_manage_case_assignment"))
    $ra: RoleAssignment(
             roleName in ("[PETSOLICITOR]", "[RESPSOLICITOR]"),
             status == Status.DELETE_REQUESTED,
             roleType == RoleType.CASE,
             roleCategory == RoleCategory.PROFESSIONAL,
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())
    $c:  Case(
              id == $caseId,
              jurisdiction == "DIVORCE",
              caseTypeId == "DIVORCE")
then
    $ra.setStatus(Status.DELETE_APPROVED);
    $ra.log("Delete approved : ccd_delete_case_roles_petitioners");
    update($ra);
    logMsg("Rule : ccd_delete_case_roles_petitioners");
end;

/*
 * CCD case roles can be created by client request originated from ccd service.
 */

rule "ccd_create_case_roles_representative"
when
    $rq: Request(clientId in ("ccd_data", "aac_manage_case_assignment"))
    $ra: RoleAssignment(
             roleName == "[LEGALREPRESENTATIVE]",
             roleCategory == RoleCategory.PROFESSIONAL,
             roleType == RoleType.CASE,
             status == Status.CREATE_REQUESTED,
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())

    $c:  Case(
              id == $caseId,
              jurisdiction == "IA",
              caseTypeId == "Asylum")
then
    $ra.setAttribute("jurisdiction", $c.getJurisdiction());
    $ra.setAttribute("caseType", $c.getCaseTypeId());
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Stage 1 approved : ccd_create_case_roles_representative");
    update($ra);
    logMsg("Rule : ccd_create_case_roles_representative");
end;


/*
 * CCD case roles can be deleted by client request originated from ccd service.
 */

rule "ccd_delete_case_roles_representative"
when
    $rq: Request(clientId in ("ccd_data", "aac_manage_case_assignment"))
    $ra: RoleAssignment(
             roleName == "[LEGALREPRESENTATIVE]",
             status == Status.DELETE_REQUESTED,
             roleType == RoleType.CASE,
             roleCategory == RoleCategory.PROFESSIONAL,
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())
    $c:  Case(
              id == $caseId,
              jurisdiction == "IA",
              caseTypeId == "Asylum")
then
    $ra.setStatus(Status.DELETE_APPROVED);
    $ra.log("Delete approved : ccd_delete_case_roles_representative");
    update($ra);
    logMsg("Rule : ccd_delete_case_roles_representative");
end;

/*
 * CCD case roles can be created by client request originated from ccd service.
 */

rule "ccd_create_case_roles_creator"
when
    $rq: Request(clientId in ("ccd_data", "aac_manage_case_assignment"))
    $ra: RoleAssignment(
             roleName == "[CREATOR]",
             roleCategory in (RoleCategory.PROFESSIONAL, RoleCategory.CITIZEN,
                              RoleCategory.JUDICIAL, RoleCategory.LEGAL_OPERATIONS),
             roleType == RoleType.CASE,
             status == Status.CREATE_REQUESTED,
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())
    $c:  Case(id == $caseId)
then
    $ra.setAttribute("jurisdiction", $c.getJurisdiction());
    $ra.setAttribute("caseType", $c.getCaseTypeId());
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Stage 1 approved : ccd_create_case_roles_creator");
    update($ra);
    logMsg("Rule : ccd_create_case_roles_creator");
end;


/*
 * CCD case roles can be deleted by client request originated from ccd service.
 */

rule "ccd_delete_case_roles_creator"
when
    $rq: Request(clientId in ("ccd_data", "aac_manage_case_assignment"))
    $ra: RoleAssignment(
             roleName == "[CREATOR]",
             roleCategory in (RoleCategory.PROFESSIONAL, RoleCategory.CITIZEN,
                              RoleCategory.JUDICIAL, RoleCategory.LEGAL_OPERATIONS),
             status == Status.DELETE_REQUESTED,
             roleType == RoleType.CASE,
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())
    $c:  Case(id == $caseId)
then
    $ra.setStatus(Status.DELETE_APPROVED);
    $ra.log("Delete approved : ccd_delete_case_roles_creator");
    update($ra);
    logMsg("Rule : ccd_delete_case_roles_creator");
end;
