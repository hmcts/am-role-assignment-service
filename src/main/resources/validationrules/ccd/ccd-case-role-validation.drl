package validationrules.ccd;
import uk.gov.hmcts.reform.roleassignment.domain.model.Assignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.RoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Request;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.Status;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RequestType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.GrantType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleCategory;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleType
import uk.gov.hmcts.reform.roleassignment.domain.model.ExistingRoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Case;
import function uk.gov.hmcts.reform.roleassignment.domain.service.common.ValidationModelService.logMsg;
import uk.gov.hmcts.reform.roleassignment.domain.model.FeatureFlag;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.FeatureFlagEnum;
import uk.gov.hmcts.reform.roleassignment.domain.model.RoleConfig;
import uk.gov.hmcts.reform.roleassignment.domain.model.RoleConfigPattern;


rule "approve_any_dummy_jurisdiction_create"
when
     // The drool bypass flag for ccd must be enabled.
     $f:  FeatureFlag(status && flagName == FeatureFlagEnum.CCD_BYPASS_1_0.getValue())
     // The request must come from the data store or AAC microservices.
     $rq: Request(clientId in ("ccd_data", "aac_manage_case_assignment"))
     // It can be to create a role assignment, but only for one of a fixed list of dummy jurisdictions.
     $ra: RoleAssignment(
         status in (Status.CREATE_REQUESTED, Status.CREATE_APPROVED),
         attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() in ("J1","J2","J3","BEFTA_MASTER",
                    "BEFTA_JURISDICTION_1","BEFTA_JURISDICTION_2","BEFTA_JURISDICTION_3","AUTOTEST1","AUTOTEST2"))
then
    // Bypass the configuration check rule by setting the 'finally approved' status.
    $ra.setStatus(Status.APPROVED);
    $ra.log("Approved : approve_any_dummy_jurisdiction_create: " + $ra.getAttributes().get("jurisdiction")
                                                                                .asText() + "/" + $ra.getRoleName());
    update($ra);
    logMsg("Rule : approve_any_dummy_jurisdiction_create");
end;


rule "approve_any_dummy_jurisdiction_delete"
when
     $f:  FeatureFlag(status && flagName == FeatureFlagEnum.CCD_BYPASS_1_0.getValue())
     $rq: Request(clientId in ("ccd_data", "aac_manage_case_assignment", "ccd_case_disposer"))
     $ra: RoleAssignment(
         status == Status.DELETE_REQUESTED,
         attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() in ("J1","J2","J3","BEFTA_MASTER",
                    "BEFTA_JURISDICTION_1","BEFTA_JURISDICTION_2","BEFTA_JURISDICTION_3","AUTOTEST1","AUTOTEST2"))
then
    $ra.setStatus(Status.DELETE_APPROVED);
    $ra.log("Delete approved : approve_any_dummy_jurisdiction_delete: " + $ra.getAttributes().get("jurisdiction")
                                                                                .asText() + "/" + $ra.getRoleName());
    update($ra);
    logMsg("Rule : approve_any_dummy_jurisdiction_delete");
end;
