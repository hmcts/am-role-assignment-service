package validationrules.iac;
import uk.gov.hmcts.reform.roleassignment.domain.model.Assignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.RoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Request;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.Classification
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.Status;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RequestType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.GrantType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleCategory;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleType
import uk.gov.hmcts.reform.roleassignment.domain.model.ExistingRoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Case;
import function uk.gov.hmcts.reform.roleassignment.domain.service.common.ValidationModelService.logMsg;
import uk.gov.hmcts.reform.roleassignment.domain.model.FeatureFlag;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.FeatureFlagEnum;
import uk.gov.hmcts.reform.roleassignment.util.ValidationUtil;
import java.time.ZonedDateTime;

/*
 * IAC "lead-judge" case roles can be created by any existing "case-allocator" user
 * and can also only be assigned to users having "leadership-judge" role.
 */

rule "ia_lead_judge_create_case_roles"
when
    $f:  FeatureFlag(status && flagName == FeatureFlagEnum.IAC_JRD_1_0.getValue())
    $ca: CaseAllocatorApproval(
                 roleAssignment.status == Status.CREATE_REQUESTED,
                 roleAssignment.attributes["jurisdiction"].asText() == "IA",
                 roleAssignment.attributes["caseType"].asText() == "Asylum",
                 roleAssignment.roleName in ("lead-judge"))
         ExistingRoleAssignment(
                 actorId == $ca.getRoleAssignment().actorId,
                 roleType == RoleType.ORGANISATION,
                 roleName in ("leadership-judge"),
                 attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")
then
    $ca.getRoleAssignment().setStatus(Status.CREATE_APPROVED);
    $ca.getRoleAssignment().log("Stage 1 approved : ia_lead_judge_create_case_roles");
    update($ca.getRoleAssignment());
    logMsg("Rule : ia_lead_judge_create_case_roles");
end;

/*
 * IAC "hearing-judge" case roles can be created by any existing "case-allocator" user
 * and can also only be assigned to users having "senior-judge" or "judge" or "fee-paid-judge" role.
 */

rule "ia_hearing_judge_create_case_roles"
when
   $f:  FeatureFlag(status && flagName == FeatureFlagEnum.IAC_JRD_1_0.getValue())
   $ca: CaseAllocatorApproval(
                roleAssignment.status == Status.CREATE_REQUESTED,
                roleAssignment.attributes["jurisdiction"].asText() == "IA",
                 roleAssignment.attributes["caseType"].asText() == "Asylum",
                roleAssignment.roleName in ("hearing-judge"))
        ExistingRoleAssignment(
                actorId == $ca.getRoleAssignment().actorId,
                roleType == RoleType.ORGANISATION,
                roleName in ("senior-judge", "judge", "fee-paid-judge"),
                attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")
then
   $ca.getRoleAssignment().setStatus(Status.CREATE_APPROVED);
   $ca.getRoleAssignment().log("Stage 1 approved : ia_hearing_judge_create_case_roles");
   update($ca.getRoleAssignment());
   logMsg("Rule : ia_hearing_judge_create_case_roles");
end;

/*
 * IAC "ftpa-judge" case roles can be created by any existing "case-allocator" user
 * and can also only be assigned to users having "senior-judge" or "judge" role.
 */

rule "ia_ftpa_judge_create_case_roles"
when
  $f:  FeatureFlag(status && flagName == FeatureFlagEnum.IAC_JRD_1_0.getValue())
  $ca: CaseAllocatorApproval(
               roleAssignment.status == Status.CREATE_REQUESTED,
               roleAssignment.attributes["jurisdiction"].asText() == "IA",
                 roleAssignment.attributes["caseType"].asText() == "Asylum",
               roleAssignment.roleName in ("ftpa-judge"))
       ExistingRoleAssignment(
               actorId == $ca.getRoleAssignment().actorId,
               roleType == RoleType.ORGANISATION,
               roleName in ("senior-judge", "judge"),
               attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")
then
  $ca.getRoleAssignment().setStatus(Status.CREATE_APPROVED);
  $ca.getRoleAssignment().log("Stage 1 approved : ia_ftpa_judge_create_case_roles");
  update($ca.getRoleAssignment());
  logMsg("Rule : ia_ftpa_judge_create_case_roles");
end;

/*
 * IAC "hearing-panel-judge" case roles can be created by any existing "case-allocator" user
 * and can also only be assigned to users having "senior-judge" or "judge" or "fee-paid-judge" role.
 */

rule "ia_hearing_panel_judge_create_case_roles"
when
  $f:  FeatureFlag(status && flagName == FeatureFlagEnum.IAC_JRD_1_0.getValue())
  $ca: CaseAllocatorApproval(
               roleAssignment.status == Status.CREATE_REQUESTED,
               roleAssignment.attributes["jurisdiction"].asText() == "IA",
               roleAssignment.attributes["caseType"].asText() == "Asylum",
               roleAssignment.roleName in ("hearing-panel-judge"))
       ExistingRoleAssignment(
               actorId == $ca.getRoleAssignment().actorId,
               roleType == RoleType.ORGANISATION,
               roleName in ("senior-judge", "judge", "fee-paid-judge"),
               attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")
then
  $ca.getRoleAssignment().setStatus(Status.CREATE_APPROVED);
  $ca.getRoleAssignment().log("Stage 1 approved : ia_hearing_panel_judge_create_case_roles");
  update($ca.getRoleAssignment());
  logMsg("Rule : ia_hearing_panel_judge_create_case_roles");
end;

/*
 * The "case-allocator" case role can be created if CaseAllocatorApproval entity is available along with
 * existing assignment of assignee having case "case-allocator" org role.
 */

rule "ia_case_allocator_create_case_roles"
when
    $f:  FeatureFlag(status && flagName == FeatureFlagEnum.IAC_JRD_1_0.getValue())
    $ca: CaseAllocatorApproval(
                 roleAssignment.status == Status.CREATE_REQUESTED,
                 roleAssignment.attributes["jurisdiction"].asText() == "IA",
                 roleAssignment.attributes["caseType"].asText() == "Asylum",
                 roleAssignment.roleName == "case-allocator")
         ExistingRoleAssignment(
                 actorId == $ca.roleAssignment.actorId,
                 roleType == RoleType.ORGANISATION,
                 roleName == "case-allocator",
                 attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")
then
    $ca.getRoleAssignment().setStatus(Status.CREATE_APPROVED);
    $ca.getRoleAssignment().log("Stage 1 approved : ia_case_allocator_create_case_roles");
    update($ca.getRoleAssignment());
    logMsg("Rule : ia_case_allocator_create_case_roles");
end;

 /*
  * The case roles can be deleted if CaseAllocatorApproval entity is available for requested role assignment.
  */


rule "ia_judicial_case_allocator_approved_delete_case_role_v11"
when
   $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_JRD_1_0.getValue())
   $ca: CaseAllocatorApproval(
                 roleAssignment.status == Status.DELETE_REQUESTED,
                 roleAssignment.attributes["jurisdiction"].asText() == "IA")
then
   $ca.getRoleAssignment().setStatus(Status.DELETE_APPROVED);
   $ca.getRoleAssignment().log("Stage 1 approved : ia_judicial_case_allocator_approved_delete_case_role_v11");
   update($ca.getRoleAssignment());
   logMsg("Rule : ia_judicial_case_allocator_approved_delete_case_role_v11");
end;

/*
 * The below rules are required for Specific and Challenged access
 * It will be toggled on with new IAC_SPECIFIC_1_0 and IAC_CHALLENGED_1_0 DB flag.
 */

/*
 * IAC "specific-access-judiciary" case creation and case-allocator as a assigner
 */
rule "case_allocator_create_specific_access_judicial_case_role"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_SPECIFIC_1_0.getValue())
    $rq: Request(
             // The assigner must be the current user.
             assignerId == authenticatedUserId,
             process == "specific-access",
             reference != null)
    $ra: RoleAssignment(
             actorId != $rq.assignerId,
             status == Status.CREATE_REQUESTED,
             roleType == RoleType.CASE,
             roleName == "specific-access-judiciary",
             roleCategory == RoleCategory.JUDICIAL,
             grantType == GrantType.SPECIFIC,
             notes != null && notes.size > 0 && notes.toString().length() > 5, /* Make sure there is at least one note with content in it */
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText(),
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() in ("IA"))
    $c:  Case(
             id == $caseId)
    $e: ExistingRoleAssignment(
             actorId == $rq.assignerId,
             roleType == RoleType.ORGANISATION,
             roleName == "case-allocator",
             grantType == GrantType.STANDARD,
             classification.isAtLeast($c.securityClassification),
             endTime == null || endTime.isAfter(ZonedDateTime.now()),
             beginTime == null || !beginTime.isAfter(ZonedDateTime.now()),
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == $c.jurisdiction,
             attributes["caseType"] == null || attributes["caseType"].asText() == $c.caseTypeId,
             attributes["region"] == null || attributes["region"].asText() != $c.getRegion(),
             attributes["baseLocation"] == null || attributes["baseLocation"].asText() != $c.getBaseLocation(),
             attributes["managedRoleCategory"] == null || ValidationUtil.csvContains($ra.roleCategory.toString(), attributes["managedRoleCategory"].asText()),
             attributes["managedRole"] == null || ValidationUtil.csvContains($ra.roleName, attributes["managedRole"].asText()))
then
    // We copy the authorisations to allow the case config to require an authorisation
    // for (particularly judicial) role mappings
    $ra.setAuthorisations($e.getAuthorisations());
    $ra.setAttribute("jurisdiction", $c.getJurisdiction());
    $ra.setAttribute("caseType", $c.getCaseTypeId());
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Stage 1 approved : case_allocator_create_specific_access_judicial_case_role");
    update($ra);
    logMsg("Rule : case_allocator_create_specific_access_judicial_case_role");
end;
