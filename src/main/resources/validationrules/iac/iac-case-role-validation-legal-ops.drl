package validationrules.iac;
import uk.gov.hmcts.reform.roleassignment.domain.model.Assignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.RoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Request;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.Status;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RequestType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.GrantType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleCategory;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleType
import uk.gov.hmcts.reform.roleassignment.domain.model.ExistingRoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.CaseAllocatorApproval;
import uk.gov.hmcts.reform.roleassignment.domain.model.Case;
import function uk.gov.hmcts.reform.roleassignment.domain.service.common.ValidationModelService.logMsg;
import uk.gov.hmcts.reform.roleassignment.domain.model.FeatureFlag;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.FeatureFlagEnum;
import uk.gov.hmcts.reform.roleassignment.util.ValidationUtil;

import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;

/*
 * IAC case worker case roles can be created by any existing tribunal casworker
 * or senior tribunal case worker, and can also only be assigned to users with
 * one of those two roles (this includes self-assignment).
 */
rule "ia_caseworker_create_case_roles"
when
    $f:  FeatureFlag(status && flagName == FeatureFlagEnum.IAC_1_0.getValue())
    $rq: Request(assignerId == authenticatedUserId)

    $ra: RoleAssignment(
             status == Status.CREATE_REQUESTED,
             roleType == RoleType.CASE,
             roleName == "tribunal-caseworker",
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())
    $c:  Case(
             id == $caseId,
             jurisdiction == "IA",
             caseTypeId == "Asylum")
         ExistingRoleAssignment(
             actorId == $ra.actorId,
             roleType == RoleType.ORGANISATION,
             roleName in ("tribunal-caseworker", "senior-tribunal-caseworker"),
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")

         ExistingRoleAssignment(
             actorId == $rq.assignerId,
             roleType == RoleType.ORGANISATION,
             roleName in ("tribunal-caseworker", "senior-tribunal-caseworker"),
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")

then
    $ra.setAttribute("jurisdiction", $c.getJurisdiction());
    $ra.setAttribute("caseType", $c.getCaseTypeId());
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Stage 1 approved : ia_caseworker_create_case_roles");
    update($ra);
    logMsg("Rule : ia_caseworker_create_case_roles");
end;

/*
 * IAC case worker case roles can be deleted by any existing tribunal casworker
 * or senior tribunal case worker.
 */
rule "ia_caseworker_delete_case_roles"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_1_0.getValue())
    $rq: Request(
             assignerId == authenticatedUserId)
    $ra: RoleAssignment(
             status == Status.DELETE_REQUESTED,
             roleType == RoleType.CASE,
             roleName == "tribunal-caseworker",
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())
         Case(
             id == $caseId,
             jurisdiction == "IA",
             caseTypeId == "Asylum")
        ExistingRoleAssignment(
             actorId == $rq.assignerId,
             roleType == RoleType.ORGANISATION,
             roleName in ("tribunal-caseworker", "senior-tribunal-caseworker"),
             attributes["jurisdiction"]!=null,attributes["jurisdiction"].asText() == "IA")

then
    $ra.setStatus(Status.DELETE_APPROVED);
    $ra.log("Delete approved : ia_caseworker_delete_case_roles");
    update($ra);
    logMsg("Rule : ia_caseworker_delete_case_roles");
end;

/*
 * Service rules for creating and deleting role assignments need only trigger based on
 * CaseAllocatorApproved objects, and need only add the service-specific constraints
 * (expected to be constraints on the existing role assignments required for the assignee, not the assigner).
 */

/*
 * The "case-manager" case role can be created if CaseAllocatorApproval entity is available along with
 * existing assignment of assignee having "tribunal-caseworker" org role.
 */
rule "ia_case_allocator_approved_create_case_manager_role_v11"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_1_1.getValue())
    $ca: CaseAllocatorApproval(
                 roleAssignment.status == Status.CREATE_REQUESTED,
                 roleAssignment.attributes["jurisdiction"].asText() == "IA",
                 roleAssignment.attributes["caseType"].asText() == "Asylum",
                 roleAssignment.roleName == "case-manager" )
         ExistingRoleAssignment(
                 actorId == $ca.getRoleAssignment().actorId,
                 roleType == RoleType.ORGANISATION,
                 roleName in ("tribunal-caseworker", "senior-tribunal-caseworker"),
                 attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")
then
    $ca.getRoleAssignment().setStatus(Status.CREATE_APPROVED);
    $ca.getRoleAssignment().log("Stage 1 approved : ia_case_allocator_approved_create_case_manager_role_v11");
    update($ca.getRoleAssignment());
    logMsg("Rule : ia_case_allocator_approved_create_case_manager_role_v11");
end;

/*
 * The "tribunal-caseworker" case role can be created if CaseAllocatorApproval entity is available along with
 * existing assignment of assignee having "tribunal-caseworker"/"senior-tribunal-caseworker" org role.
 */
rule "ia_case_allocator_approved_create_tribunal_caseworker_role_v11"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_1_1.getValue())
    $ca: CaseAllocatorApproval(
                 roleAssignment.status == Status.CREATE_REQUESTED,
                 roleAssignment.attributes["jurisdiction"].asText() == "IA",
                 roleAssignment.attributes["caseType"].asText() == "Asylum",
                 roleAssignment.roleName == "tribunal-caseworker")
         ExistingRoleAssignment(
                 actorId == $ca.getRoleAssignment().actorId,
                 roleType == RoleType.ORGANISATION,
                 roleName in ("tribunal-caseworker","senior-tribunal-caseworker"),
                 attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")
then
    $ca.getRoleAssignment().setStatus(Status.CREATE_APPROVED);
    $ca.getRoleAssignment().log("Stage 1 approved : ia_case_allocator_approved_create_tribunal_caseworker_role_v11");
    update($ca.getRoleAssignment());
    logMsg("Rule : ia_case_allocator_approved_create_tribunal_caseworker_role_v11");
end;


/*
 * The "case-allocator" case role can be created if CaseAllocatorApproval entity is available along with
 * existing assignment of assignee having case "case-allocator" org role.
 */

rule "ia_case_allocator_approved_create_case_allocator_role_v11"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_1_1.getValue())
    $ca: CaseAllocatorApproval(
                 roleAssignment.status == Status.CREATE_REQUESTED,
                 roleAssignment.attributes["jurisdiction"].asText() == "IA",
                 roleAssignment.attributes["caseType"].asText() == "Asylum",
                 roleAssignment.roleName == "case-allocator")
         ExistingRoleAssignment(
                 actorId == $ca.roleAssignment.actorId,
                 roleType == RoleType.ORGANISATION,
                 roleName == "case-allocator",
                 attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == "IA")
then
    $ca.getRoleAssignment().setStatus(Status.CREATE_APPROVED);
    $ca.getRoleAssignment().log("Stage 1 approved : ia_case_allocator_approved_create_case_allocator_role_v11");
    update($ca.getRoleAssignment());
    logMsg("Rule : ia_case_allocator_approved_create_case_allocator_role_v11");
end;

/*
 * The below rules are required for Specific and Challenged access
 * It will be toggled on with new IAC_SPECIFIC_1_0 and IAC_CHALLENGED_1_0 DB flag.
 */

/*
 * IAC "specific-access-legal-ops" case creation and case-allocator as a assigner
 */
rule "case_allocator_create_specific_access_legal_ops_case_role"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_SPECIFIC_1_0.getValue())
    $rq: Request(
             // The assigner must be the current user.
             assignerId == authenticatedUserId,
             process == "specific-access",
             reference != null)
    $ra: RoleAssignment(
             actorId != $rq.assignerId,
             status == Status.CREATE_REQUESTED,
             roleType == RoleType.CASE,
             roleName == "specific-access-legal-ops",
             roleCategory == RoleCategory.LEGAL_OPERATIONS,
             grantType == GrantType.SPECIFIC,
             notes != null && notes.size > 0 && notes.toString().length() > 5, /* Make sure there is at least one note with content in it */
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText(),
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() in ("IA"))
    $c:  Case(
             id == $caseId)
    $e: ExistingRoleAssignment(
             actorId == $rq.assignerId,
             roleType == RoleType.ORGANISATION,
             roleName == "case-allocator",
             grantType == GrantType.STANDARD,
             classification.isAtLeast($c.securityClassification),
             endTime == null || endTime.isAfter(ZonedDateTime.now()),
             beginTime == null || !beginTime.isAfter(ZonedDateTime.now()),
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == $c.jurisdiction,
             attributes["caseType"] == null || attributes["caseType"].asText() == $c.caseTypeId,
             attributes["region"] == null || attributes["region"].asText() != $c.getRegion(),
             attributes["baseLocation"] == null || attributes["baseLocation"].asText() != $c.getBaseLocation(),
             attributes["managedRoleCategory"] == null || ValidationUtil.csvContains($ra.roleCategory.toString(), attributes["managedRoleCategory"].asText()),
             attributes["managedRole"] == null || ValidationUtil.csvContains($ra.roleName, attributes["managedRole"].asText()))
then
    // We copy the authorisations to allow the case config to require an authorisation
    // for (particularly judicial) role mappings
    $ra.setAuthorisations($e.getAuthorisations());
    $ra.setAttribute("jurisdiction", $c.getJurisdiction());
    $ra.setAttribute("caseType", $c.getCaseTypeId());
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Stage 1 approved : case_allocator_create_specific_access_legal_ops_case_role");
    update($ra);
    logMsg("Rule : case_allocator_create_specific_access_legal_ops_case_role");
end;


/*
 * IAC "challenged-access" case roles self creation user - general
 */
rule "challenged_access_create_case_role_legal_ops"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_CHALLENGED_1_0.getValue())
    $rq: Request(
             // The assigner must be the current user.
             assignerId == authenticatedUserId,
             process == "challenged-access",
             reference != null)
    $ra: RoleAssignment(
             actorId == $rq.authenticatedUserId,
             status == Status.CREATE_REQUESTED,
             roleType == RoleType.CASE,
             roleName == "challenged-access-legal-ops",
             roleCategory == RoleCategory.LEGAL_OPERATIONS,
             grantType == GrantType.CHALLENGED,
             endTime != null && !endTime.isAfter(ZonedDateTime.now().truncatedTo(ChronoUnit.DAYS).plusDays(1))
             && !endTime.isBefore(ZonedDateTime.now()), /* request cannot have past end time */
             notes != null && notes.size > 0 && notes.toString().length() > 5, /* Make sure there is at least one note with content in it */
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())
    $c:  Case(
             id == $caseId)
    Request(reference == $caseId + "/" + $ra.roleName + "/" + $ra.actorId)
    $e: ExistingRoleAssignment(
             actorId == $ra.actorId,
             roleType == RoleType.ORGANISATION,
             roleCategory == $ra.roleCategory,
             grantType == GrantType.STANDARD,
             classification.isAtLeast($c.securityClassification),
             endTime == null || endTime.isAfter(ZonedDateTime.now()),
             beginTime == null || !beginTime.isAfter(ZonedDateTime.now()),
             attributes["substantive"] != null && attributes["substantive"].asText() == "Y",
             attributes["jurisdiction"] != null && attributes["jurisdiction"].asText() == $c.jurisdiction,
             attributes["caseType"] == null || attributes["caseType"].asText() == $c.caseTypeId,
             attributes["region"] == null || attributes["region"].asText() != $c.region,
             attributes["baseLocation"] == null || attributes["baseLocation"].asText() != $c.baseLocation)
then
    // The classification of $e has already been checked, so access to the case is OK.
    // We set $ra.classification to match the case - if the case is further restricted,
    // then the user will need to request challenged access again, if they still can.
    $ra.setClassification($c.getSecurityClassification());
    // We copy the authorisations to allow the case config to require an authorisation
    // for (particularly judicial) role mappings
    $ra.setAuthorisations($e.getAuthorisations());
    $ra.setAttribute("caseType", $c.getCaseTypeId());
    $ra.setAttribute("jurisdiction", $c.getJurisdiction());
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Stage 1 approved : challenged_access_create_case_role_legal_ops");
    update($ra);
    logMsg("Rule : challenged_access_create_case_role_legal_ops");
end;
