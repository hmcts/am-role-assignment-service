package validationrules.iac.common;
import uk.gov.hmcts.reform.roleassignment.domain.model.Assignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.RoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Request;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.Classification
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.Status;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RequestType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.GrantType;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleCategory;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.RoleType
import uk.gov.hmcts.reform.roleassignment.domain.model.ExistingRoleAssignment;
import uk.gov.hmcts.reform.roleassignment.domain.model.Case;
import function uk.gov.hmcts.reform.roleassignment.domain.service.common.ValidationModelService.logMsg;
import uk.gov.hmcts.reform.roleassignment.domain.model.FeatureFlag;
import uk.gov.hmcts.reform.roleassignment.domain.model.enums.FeatureFlagEnum;

import java.time.ZonedDateTime;


/*
 * The below rules are required for Specific and Challenged access
 * It will be toggled on with new IAC_SPECIFIC_1_0 and IAC_CHALLENGED_1_0 DB flag.
 */

/*
 * IAC "specific-access-requested" case roles self creation user
 */
rule "create_specific_access_requested_case_role"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_SPECIFIC_1_0.getValue())
    $rq: Request(
             // The assigner must be the current user.
             assignerId == authenticatedUserId,
             process == "specific-access",
             reference != null)
    $ra: RoleAssignment(
             actorId == $rq.authenticatedUserId,
             status == Status.CREATE_REQUESTED,
             roleType == RoleType.CASE,
             roleName == "specific-access-requested",
             grantType == GrantType.SPECIFIC,
             notes != null && notes.size > 0 && notes.toString().length() > 5, /* Make sure there is at least one note with content in it */
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())
    $c:  Case(
             id == $caseId)
    $e: ExistingRoleAssignment(
             actorId == $ra.actorId,
             roleType == RoleType.ORGANISATION,
             roleCategory == $ra.roleCategory,
             grantType in (GrantType.STANDARD, GrantType.BASIC),
             endTime == null || endTime.isAfter(ZonedDateTime.now()),
             beginTime == null || !beginTime.isAfter(ZonedDateTime.now()))
then
    $ra.setAttribute("jurisdiction", $c.getJurisdiction());
    $ra.setAttribute("caseType", $c.getCaseTypeId());
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Stage 1 approved : create_specific_access_requested_case_role");
    update($ra);
    logMsg("Rule : create_specific_access_requested_case_role");
end;

/*
 * IAC "specific-access" case roles self deletion
 */
rule "delete_specific_access_requested_case_role"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_SPECIFIC_1_0.getValue())
    $rq: Request(
             // The assignee and the assigner must be the current user.
             assignerId == authenticatedUserId,
             process == "specific-access",
             reference != null)
    $ra: RoleAssignment(
             actorId == $rq.authenticatedUserId,
             status == Status.DELETE_REQUESTED,
             roleType == RoleType.CASE,
             roleName in ("specific-access-requested", "specific-access-granted", "specific-access-denied"))
then
    $ra.setStatus(Status.DELETE_APPROVED);
    $ra.log("Stage 1 approved : delete_specific_access_requested_case_role");
    update($ra);
    logMsg("Rule : delete_specific_access_requested_case_role");
end;

/*
 * IAC "specific-access" case approval or denied roles
 */
rule "create_specific_access_granted_or_denied_case_role"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_SPECIFIC_1_0.getValue())
    $rq: Request(
             clientId == "xui_webapp",
             process == "specific-access",
             reference != null)
    $ra: RoleAssignment(
             status == Status.CREATE_REQUESTED,
             roleType == RoleType.CASE,
             roleName in ("specific-access-granted", "specific-access-denied"),
             classification == Classification.PRIVATE,
             grantType == GrantType.BASIC,
             readOnly == true,
             endTime != null,
             notes != null && notes.size > 0 && notes.toString().length() > 5, /* Make sure there is at least one note with content in it */
             attributes["caseId"] != null && $caseId : attributes["caseId"].asText())
    $c:  Case(
             id == $caseId)
    $e: ExistingRoleAssignment(
             actorId == $ra.actorId,
             roleType == RoleType.CASE,
             roleName == "specific-access-requested",
             roleCategory == $ra.roleCategory,
             attributes["requestedRole"] != null && $ra.attributes["requestedRole"] != null && attributes["requestedRole"].asText() == $ra.attributes["requestedRole"].asText())
then
    $ra.setAttribute("jurisdiction", $c.getJurisdiction());
    $ra.setAttribute("caseType", $c.getCaseTypeId());
    $ra.setStatus(Status.CREATE_APPROVED);
    $ra.log("Stage 1 approved : create_specific_access_granted_or_denied_case_role");
    update($ra);
    logMsg("Rule : create_specific_access_granted_or_denied_case_role");
end;

/*
 * IAC "specific-access-requested" case deletion
 */
rule "delete_specific_access_granted_or_denied_case_role"
when
    $f : FeatureFlag(status && flagName == FeatureFlagEnum.IAC_SPECIFIC_1_0.getValue())
    $rq: Request(
             clientId == "xui_webapp",
             process == "specific-access",
             reference != null)
    $ra: RoleAssignment(
             status == Status.DELETE_REQUESTED,
             roleType == RoleType.CASE,
             roleName == "specific-access-requested")
then
    $ra.setStatus(Status.DELETE_APPROVED);
    $ra.log("Stage 1 approved : delete_specific_access_granted_or_denied_case_role");
    update($ra);
    logMsg("Rule : delete_specific_access_granted_or_denied_case_role");
end;
