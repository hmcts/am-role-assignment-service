server:
  port: ${PORT:4096}
info:
  app:
    name: "am role assignment service"
management:
  health:
    db:
      enabled: true
    defaults:
      enabled: true
    diskspace:
      enabled: true
  endpoint:
    health:
      show-details: "always"
      enabled: true
      cache:
        time-to-live: 5s
  endpoints:
    health:
      sensitive: false
    web:
      base-path: /actuator
      exposure:
        include: "*"
  server:
    servlet:
      context-path: /actuator

#If you use a database then uncomment below lines and update db properties accordingly

security:
  anonymousPaths:
    - "/"
    - "/swagger-ui.html"
    - "/swagger-resources/**"
    - "/v2/api-docs"
    - "/webjars/springfox-swagger-ui/**"
    - "/search/**"
    - "/csrf"
    - "/error"
    - "/favicon.ico"

spring:
  application:
    name: Role Assignment Service
  main:
    allow-bean-definition-overriding: true
  jackson:
    default-property-inclusion: NON_NULL
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true
  liquibase:
    enabled: ${ENABLE_DB_MIGRATE:true}
    change-log: classpath:/db/changelog/db.changelog-master.xml
  datasource:
    url: jdbc:postgresql://${ROLE_ASSIGNMENT_DB_HOST:localhost}:${ROLE_ASSIGNMENT_DB_PORT:5451}/${ROLE_ASSIGNMENT_DB_NAME:role_assignment}${ROLE_ASSIGNMENT_DB_OPTIONS:?stringtype=unspecified}
    username: ${ROLE_ASSIGNMENT_DB_USERNAME:am}
    password: ${ROLE_ASSIGNMENT_DB_PASSWORD:am}
    properties:
      charSet: UTFh-8
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${OPEN_ID_API_BASE_URI:https://idam-web-public.aat.platform.hmcts.net/o}
        registration:
          oidc:
            client-id: microservicekey-am-role-assignment-service
            client-secret: ${AM_ROLE_ASSIGNMENT_SERVICE_SECRET:AAAAAAAAAAAAAAAA}

oidc.issuer: ${OIDC_ISSUER_URL:https://forgerock-am.service.core-compute-idam-aat.internal:8443/openam/oauth2/hmcts}

idam:
  s2s-auth:
    # AAAAAAAAAAAAAAAA
    totp_secret: ${AM_ROLE_ASSIGNMENT_SERVICE_SECRET:AAAAAAAAAAAAAAAA}
    microservice: am_role_assignment_service
    url: ${IDAM_S2S_URL:http://localhost:4502}
  s2s-authorised:
    services: ${ROLE_ASSIGNMENT_S2S_AUTHORISED_SERVICES:ccd_gw,am_role_assignment_service}
  api.url: ${IDAM_USER_URL:http://localhost:5000}
  client:
    id: ${ROLE_ASSIGNMENT_IDAM_CLIENT_ID:am_docker}
    secret: ${ROLE_ASSIGNMENT_IDAM_CLIENT_SECRET:am_docker_secret}
    redirect_uri: ${ROLE_ASSIGNMENT_IDAM_REDIRECT_URI:http://localhost:4096/oauth2redirect}
    admin:
      userId: ${ROLE_ASSIGNMENT_IDAM_ADMIN_USERID:befta.caseworker.2.solicitor.2@gmail.com}
      password: ${ROLE_ASSIGNMENT_IDAM_ADMIN_PASSWORD:Pa55word11}
      scope: ${ROLE_ASSIGNMENT_IDAM_ADMIN_SCOPE:search-user}


testS2S:
  api:
    url: "/testS2SAuthorization"

feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: basic
      datastoreclient:
        url: ${CCD_DATA_STORE_URL:http://localhost:4452}
  hystrix:
    enabled: true

swaggerUrl: ${ROLE_ASSIGNMENT_SWAGGER_AM_URL:localhost:4096}
roleAssignmentUrl: ${TEST_URL:http://localhost:4096}
launchdarkly:
  sdk:
    key: ${LD_SDK_KEY:}
    environment: ${LAUNCH_DARKLY_ENV:pr}
    user: am-${LAUNCH_DARKLY_ENV:local}

audit:
  log:
    ignore:
      statues: 404
    enabled: true

token:
  cache:
    ttl:
      secs: 900000




